<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>XWiki</web>
<name>Invitation</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1271083477000</creationDate>
<date>1271850308000</date>
<contentUpdateDate>1271850308000</contentUpdateDate>
<version>1.1</version>
<title>$msg.get("xe.invitation.heading")</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<class>
<name>XWiki.Invitation</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<allowUsersOfOtherWikis>
<defaultValue></defaultValue>
<displayFormType>checkbox</displayFormType>
<displayType></displayType>
<name>allowUsersOfOtherWikis</name>
<number>5</number>
<prettyName>Allow users of other wikis to send mail</prettyName>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</allowUsersOfOtherWikis>
<emailClass>
<name>emailClass</name>
<number>7</number>
<picker>0</picker>
<prettyName>Email message XClass</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</emailClass>
<emailContainer>
<name>emailContainer</name>
<number>8</number>
<picker>0</picker>
<prettyName>Document containing email XObjects</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</emailContainer>
<emailRegex>
<name>emailRegex</name>
<number>6</number>
<picker>0</picker>
<prettyName>Regular expression for validating email addresses</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</emailRegex>
<from_address>
<name>from_address</name>
<number>2</number>
<picker>0</picker>
<prettyName>Admin email address (messages will list this as their from address)</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</from_address>
<javamail_extra_props>
<editor>---</editor>
<name>javamail_extra_props</name>
<number>13</number>
<picker>0</picker>
<prettyName>Javamail extra properties</prettyName>
<rows>5</rows>
<size>40</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</javamail_extra_props>
<messageBodyTemplate>
<editor>---</editor>
<name>messageBodyTemplate</name>
<number>4</number>
<picker>0</picker>
<prettyName>Email message body template</prettyName>
<rows>5</rows>
<size>40</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</messageBodyTemplate>
<smtp_port>
<name>smtp_port</name>
<number>12</number>
<picker>0</picker>
<prettyName>Smtp port</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</smtp_port>
<smtp_server>
<name>smtp_server</name>
<number>11</number>
<picker>0</picker>
<prettyName>Smtp server host name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</smtp_server>
<smtp_server_password>
<name>smtp_server_password</name>
<number>10</number>
<picker>0</picker>
<prettyName>Smtp password</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</smtp_server_password>
<smtp_server_username>
<name>smtp_server_username</name>
<number>9</number>
<picker>0</picker>
<prettyName>Smtp username</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</smtp_server_username>
<subjectLineTemplate>
<name>subjectLineTemplate</name>
<number>3</number>
<picker>0</picker>
<prettyName>Email subject line template</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</subjectLineTemplate>
</class>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>XWiki.Invitation</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<guid>c042f28e-20f8-4fdd-b335-89928ef5f1d5</guid>
<property>
<cache>default</cache>
</property>
<property>
<code>/* Hide unwanted page stuff */
#contentmenu *, #hierarchy *, #document-info *, #xdocFooter {
  display: none;
}

.invitation, .invitation input[type='text'], .invitation textarea, .invitation table {
  float: left;
  width: 450px; 
}

.invitation-preview {
  background-color: rgb(252, 252, 252);
  border: 1px solid rgb(214, 225, 231);
  padding: 3px;
  margin-left: 30px;
}

.invitation-preview .field {
  background-color: rgb(255, 255, 255);
  margin-left: 20px;
  margin-bottom: 10px;
  padding: 10px;
  overflow: hidden;

  /* Makes the field fit with padding and margins. */
  width: 390px;
}

.clearboth {
  clear:both;
}

.invitation input[type='text'], .invitation textarea {
  margin-bottom: 10px;
}

/* Labels */
.invitation strong, .invitation label {
  text-transform: uppercase;
}

/* "Preview:" label */
.invitation strong {
  padding-left: 30px;
}

.invitation-preview strong {
  padding-left: 20px;
}</code>
</property>
<property>
<name>Invitation Application</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<displayType>input</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator>|</separator>
<separators>|,</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>XWiki.Invitation</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>4ec1354e-d3b8-4190-abf6-4b6f02f6a39c</guid>
<property>
<tags/>
</property>
</object>
<content>{{velocity}}
##set($hasEdit = false)
#*
 * Invitation Application
 * This page is used for inviting a friend or group of friends to join and participate in the wiki.
 * It stores and sends email so the email store should be checked from time to time to make sure the service
 * is not being abused to send spam.
 *
 * This script depends on the following variables being set.
 *
 * $hasEdit (boolean) true if the current user has edit access on this document.
 *
 * This script is affected by the following documents:
 *
 * XWiki.InvitationMessages stores all of the mail message objects. If this does not exist it will be created.
 *                          May be changed in the configuration.
 *
 * XWiki.InvitationMailClass the class for mail message objects. May be changed in the configuration.
 *
 * XWiki.InvitationConfig configuration for this code. Contains an XObject of the class defined in this document.
 *
 *###
## Get CSS for this page
$xwiki.get('ssx').use($doc.getFullName())
##
## Don't load comments, history, etc.
#set($docextras = [])
##
## If no configuration specified then use hardcoded defaults.
#set($emailRegex = '/^([^@\s]+)@((?:[-a-zA-Z0-9]+\.)+[a-zA-Z]{2,})$/')
#set($emailClass = 'XWiki.InvitationMailClass')
#set($emailContainerName = "XWiki.InvitationMessages")
#set($subjectLineTemplate = '{{velocity}}$xcontext.getUser().replaceAll("^[^\.]*.", "") has invited you to join '
     + '$xwiki.getRequestURL().replaceAll("http://([^/:]*).*$", "$1"): $!subjectLine{{/velocity}}')
#set($n = $util.getNewline())
#set($messageBodyTemplate = '{{velocity}}You have received this mail because $xwiki.getUserName($xcontext.getUser(),'
                          + ' false) has invited you to join $xwiki.getRequestURL().replaceAll("http://([^/:]*).*$",'
                          + ' "$1").' + "$n$n" + '{{html}}&lt;p class="user-message"&gt;' + "$n" + '$!escapetool.html($!me'
                          + 'ssageBody)&lt;/p&gt;{{/html}}' + "$n$n" + '[[Accept the invitation and join&gt;&gt;$doc.getExternal'
                          + 'URL("view", "actionCode=2&amp;messageID=$messageID")||class="join-link"]] [[Decline&gt;&gt;$doc.g'
                          + 'etExternalURL("view", "actionCode=3&amp;messageID=$messageID")||class="decline-link"]]'
                          + "$n" + '----' + "$n" + 'If this message looks like abuse of our system, please [[report '
                          + 'it&gt;&gt;$doc.getExternalURL("view", "actionCode=5&amp;messageID=$messageID")]].' + "$n" + '{{/v'
                          + 'elocity}}' + "$n$n" + '{{html clean=false}}&lt;style&gt;&lt;!--p.user-message, a.join-link, a.de'
                          + 'cline-link {font-size: 130%}/* Necessary because colibri.css is not available in email '
                          + 'client. */ a {color: #4791BC;text-decoration: none;}div.email * {font-size:87.5%;}/* En'
                          + 'd of colibri.css stuff */a.join-link {float: left;}a.decline-link {color: #f88;float: r'
                          + 'ight;}hr {clear: both;}--&gt;&lt;/style&gt;{{/html}}')
##
## Load some parameters from the configuration.
#set($config = '')
#set($configDoc = $xwiki.getDocumentAsAuthor("XWiki.InvitationConfig"))
## If no configuration document exists, create one and save it.
#if($configDoc.isNew())
  $configDoc.setContent('{{velocity}}{{info}}$msg.get("xe.invitation.configInfo"){{/info}}{{/velocity}}')##
  #set($config = $configDoc.newObject($doc.getFullName()))
  $config.set('emailRegex', $emailRegex)##
  $config.set('emailClass', $emailClass)##
  $config.set('emailContainer', $emailContainerName)##
  $config.set('subjectLineTemplate', $subjectLineTemplate)##
  $config.set('messageBodyTemplate', $messageBodyTemplate)##
  $config.set('allowUsersOfOtherWikis', 0)##
  ## SMTP settings:
  $config.set('from_address', 'admin@localhost.localdomain')##
  $config.set('smtp_port', '25')##
  $config.set('smtp_server', 'localhost')##
  ## Now create the configurable objects.
  #set($configurable = $configDoc.newObject('XWiki.ConfigurableClass'))
  $configurable.set('displayInSection', 'Invitation')##
  $configurable.set('configurationClass', "$doc.getFullName()")##
  $configurable.set('configureGlobally', 1)##
  #set($propsToShow = 'subjectLineTemplate|messageBodyTemplate|emailRegex|from_address|allowUsersOfOtherWikis|emailC'
                      + 'lass|emailContainer')##
  $configurable.set('propertiesToShow', $propsToShow)##
  #set($configurable = $configDoc.newObject('XWiki.ConfigurableClass'))##
  $configurable.set('displayInSection', 'Invitation')##
  $configurable.set('heading', '$msg.get("xe.invitation.configuration.smtpHeading")')##
  $configurable.set('configurationClass', "$doc.getFullName()")##
  $configurable.set('configureGlobally', 1)##
  $configurable.set('propertiesToShow',
                    'smtp_server_password|smtp_server_username|smtp_port|smtp_server|javamail_extra_props')##
  #disallowViewForAll($configDoc)##
  $configDoc.saveAsAuthor()##
#else
  ## Load configuration from config XObject
  #set($config = $configDoc.getObject($doc.getFullName()))
  #set($emailRegex = $config.getProperty('emailRegex').getValue())
  #set($emailClass = $config.getProperty('emailClass').getValue())
  #set($emailContainerName = $config.getProperty('emailContainer').getValue())
  #set($subjectLineTemplate = $config.getProperty('subjectLineTemplate').getValue())
  #set($messageBodyTemplate = $config.getProperty('messageBodyTemplate').getValue())
  #if($config.getProperty('allowUsersOfOtherWikis').getValue() == '1')
    #set($allowUsersOfOtherWikis = true)
  #else
    #set($allowUsersOfOtherWikis = false)
  #end
#end
##
## Load the document containing all of the invitation mail.
## If this doesn't already exist, it's created.
#set($emailContainer = $xwiki.getDocumentAsAuthor($emailContainerName))
#if($emailContainer.isNew())
  #set($discard = $emailContainer.setContent('{{velocity}}{{info}}$msg.get("xe.invitation.emailContainerInfo"){{/info}}{{/velocity}}'))
  #disallowViewForAll($emailContainer)
#end
##
## Load messages into a Map by messageID.
#set($messages = {})
#foreach($obj in $emailContainer.getObjects($emailClass))
  #set($discard = $messages.put($obj.getProperty('messageID').getValue(), $obj))
#end
##
##---------------------------------------------------------------------
## Decide what we should do.
##---------------------------------------------------------------------
##
## Get around the fact that the administration application still includeForm's this document
## when we want to configure the "Invitation" section.
#if($xcontext.getAction() != 'admin')
  #if("$!request.get('actionCode')" != '')
    #doAction($!request.get('messageID'),
              $!request.get('actionCode'),
              $!request.get('memo'),
              $!request.get('confirm'),
              $hasEdit, $messages, $emailContainer)
  #elseif($xcontext.getUser() == 'XWiki.XWikiGuest')
    ## All functions below are members only.
    ##
    $msg.get('xe.invitation.onlyMembersCanSendMail')
  #elseif(!$hasEdit &amp;&amp; "#isUserReportedSpammer($emailClass, $emailContainer)" != 'false')
    ## The current user has been reported as a spammer, they are not allowed to send more mail until
    ## the situation has been investigated.

    ## A message which you sent was reported as spam and your privilege to send mail has suspended...
    $msg.get('xe.invitation.userIsReportedSpammer')
    ##
  #elseif(!$hasEdit
          &amp;&amp; !$allowUsersOfOtherWikis
          &amp;&amp; $doc.getWiki() != $xwiki.getDocument($xcontext.getUser()).getWiki())
    ## Users of other subwikis are not allowed to send mail.
    $msg.get('xe.invitation.onlyMembersCanSendMail')
    $msg.get('xe.invitation.youAreAMemberOfOtherWiki', [$xwiki.getDocument($xcontext.getUser()).getWiki()])
  #else
    ## The user is authorized to send mail &lt;-------------------------------------------------------
    ## Get the list of email addresses to send to.
    #set($recipientString = $escapetool.html($request.get('recipients')))
    #if($hasEdit)
      #set($recipients = $recipientString.split(' '))
    #else
      ## If the user can't edit this page, we won't let them sent to multiple addresses.
      #set($recipients = [$recipientString])
    #end
    ##
    ## get the user supplied subject and message content.
    #set($subjectLine = $request.get('subjectLine'))
    #set($messageBody = $request.get('messageBody'))

    #if("$!request.get('sendMail')" != '')
      ## We are being asked to send a message.
      ##
      #set($mail = [])
      #generateMailFromTemplate($subjectLineTemplate, $messageBodyTemplate, $emailClass,
                                $recipients, $emailRegex, $subjectLine, $messageBody, $mail, $emailContainer)
      #sendMail($mail, $config, $emailContainer)
      #set($errors = [])
      #foreach($message in $mail)
        #set($status = $message.getProperty('statusCode').getValue())
        #if($status == '7' || $status == '0')
          #set($discard = $errors.add($message))
        #end
      #end

      {{html wiki=true}}
       &lt;div class="invitation"&gt;

        #if($errors.size() &gt; 0)
          ## An error has occured while sending the message.
          {{error}}$msg.get('xe.invitation.errorWhileSending'){{/error}}
        #else
          ## Your message has been sent.
          {{info}}$msg.get('xe.invitation.successSending'){{/info}}
        #end

        #displayMessageTable($mail, ['sentDate', 'recipient', 'statusCode'])
       &lt;/div&gt;
      {{/html}}

      #displayMessage($mail.get(0), '', '')
    #elseif("$!request.get('inspectCode')" != '')
      ## Either a user wants to inspect their old messages or an admin wants to inspect everyone's messages.
      #inspectMessages($messages, $request.get('inspectCode'), $hasEdit, $request.get('messageID'))
    #else
      ## The user wants to write and preview a message.
      #displayForm($recipientString, $subjectLine, $messageBody, $hasEdit)
      #set($mail = [])
      ## No recipients ('',) because we are just creating it to preview.
      #generateMailFromTemplate($subjectLineTemplate, $messageBodyTemplate, $emailClass,
                                '', $emailRegex, $subjectLine, $messageBody, $mail, $emailContainer)
      #displayMessage($mail.get(0), $recipients, $emailRegex)
    #end
    ## Clear the float:left which puts elements side by side.


    {{html}}&lt;p class="clearboth"&gt;&lt;/p&gt;{{/html}}

    #displayUserTools($request.get('inspectCode'))
    #if($hasEdit)
      #displayAdministrativeTools($request.get('inspectCode'))
    #end
    #if("$!request.getQueryString()" != '')
      ## Return to the main page

      **[[$msg.get('xe.invitation.returnToMainPage')&gt;&gt;$doc.getFullName()]]**
    #end
  #end
#end
##
##---------------------------------------------------------------------
## The macros (Nothing below this point is run directly)
##---------------------------------------------------------------------
##
#*
 * Send an email message.
 *
 * $mail (List&lt;XObject&gt;) a list of invitation email messages.
 *
 * $config (XObject) configuration for the inviter.
 *
 * $emailContainer (Document) the document contining the mail message.
 *###
#macro(sendMail, $mail, $config, $emailContainer)
  ##
  ## Get mail sender plugin.
  #set($sender = $xwiki.get('mailsender'))
  ##
  ## If parameters are set in the local config, use them, otherwise use global defaults.
  #set($senderConfig = $sender.createMailConfiguration($xwiki))
  #if("$!config.getProperty('smtp_server').getValue()" != '')
    $senderConfig.setHost($config.getProperty('smtp_server').getValue())##
  #end
  #if("$!config.getProperty('smtp_port').getValue()" != '')
    $senderConfig.setPort($mathtool.toInteger($config.getProperty('smtp_port').getValue()))##
  #end
  #if("$!config.getProperty('smtp_server_username').getValue()" != '')
    $senderConfig.setSmtpUsername($config.getProperty('smtp_server_username').getValue())##
  #end
  #if("$!config.getProperty('smtp_server_password').getValue()" != '')
    $senderConfig.setSmtpPassword($config.getProperty('smtp_server_password').getValue())##
  #end
  #if("$!config.getProperty('javamail_extra_props').getValue()" != '')
    $senderConfig.setExtraProperties($config.getProperty('javamail_extra_props').getValue())##
  #end
  ##
  #foreach($letter in $mail)
    #set($message = $sender.createMail())
    ##
    #if("$!config.getProperty('from_address').getValue()" != '')
      $message.setFrom($config.getProperty('from_address').getValue())##
    #end
    ##
    ## Set recipients
    #set($recipient = $letter.getProperty('recipient').getValue())##
    $message.setTo($recipient)##
    ##
    ## Set the subject line and message body.
    $message.setSubject($letter.getProperty('subjectLine').getValue())##
    ##
    ## If text part is not set then we get an NPE when trying to craft a multipart message.
    $message.setTextPart('')##
    ## Put all in email div so that we can apply CSS only to the email and not to the preview.
    $message.setHtmlPart("&lt;div class='email'&gt;$letter.getProperty('messageBody').getValue()&lt;/div&gt;")##
    ##
    ## Send the message
    #if("$sender.sendMail($message, $senderConfig)" != 0)
      $letter.set('statusCode', 7)
    #else
      ## Set this message code to 'sent'
      $letter.set('statusCode', 1)
    #end
    ## Comment = "Added Email Message."
    $emailContainer.saveAsAuthor($msg.get('xe.invitation.sendMail.addMessageSaveComment'))
  #end
#end
##
#*
 * Check the format of an email address against a regular expression.
 *
 * $subjectLineTemplate (String) This will be evaluated as velocity and placed in the email subject line.
 *                               You may refer to $messageID and $subjectLine in the code.
 *
 * $messageBodyTemplate (String) This will be evaluated as velocity and placed in the email message body.
 *                               You may refer to $messageID, $messageBody, You may also use xwiki2.0 syntax
 *                               in the template.
 *
 * $emailClass (String) The document name of the XClass representing email messages.
 *
 * $recipients (List&lt;String&gt;) Email addresses to send this message to.
 *
 * $emailRegex (String) The regular expression to validate the email addresses against. Undefined behavior will result
 *                      from an invalid expression.
 *
 * $subjectLine (String) The message subject. This can be modified or ignored by the template.
 *
 * $messageBody (String) The message content. This can be modified or ignored by the template.
 *
 * $mail (List&lt;XObject&gt;) This list will be populated with mail objects for each recipient.
 *
 * $emailContainer (Document) This document is where the mail object will be stored for later review by admins.
 *###
#macro(generateMailFromTemplate, $subjectLineTemplate, $messageBodyTemplate, $emailClass, $recipients, $emailRegex, 
                                 $subjectLine, $messageBody, $mail, $emailContainer)
  #if($recipients != '')
    #set($sendTo = [])
    #validateAddressFormat($recipients, $emailRegex, $sendTo)
    #set($messageGroupID = $mathtool.getRandom())
  #else
    ## If we're just doing a test run, no recipients but we still want to generate a message.
    #set($sendTo = [''])
  #end
  ##
  #foreach($recipient in $sendTo)
    #set($message = $emailContainer.newObject($emailClass))
    $message.set('sendingUser', $context.getUser())##
    $message.set('statusCode', 0)##
    $message.set('sentDate', '')##
    $message.set('messageGroupID', $messageGroupID)##
    $message.set('recipient', $recipient)##
    ## Set the message id to a random number string, set it to $messageID variable so it can be used by the template.
    #set($messageID = "$mathtool.getRandom().toString().replaceAll('\.','')##
                       $mathtool.getRandom().toString().replaceAll('\.','')##
                       $mathtool.getRandom().toString().replaceAll('\.','')")
    $message.set('messageID', $messageID)##
    ## Generate the message from the template - html in the subject line is ignored by the mail client.
    $message.set('subjectLine', "$doc.getRenderedContent($subjectLineTemplate, 'xwiki/2.0', 'plain/1.0')")##
    $message.set('messageBody', "$doc.getRenderedContent($messageBodyTemplate, 'xwiki/2.0')")##
    #set($discard = $mail.add($message))
  #end
#end
##
#*
 * Check the format of an email address against a regular expression.
 *
 * $allAddresses (List&lt;String&gt;) The list of addresses to validate.
 *
 * $emailRegex (String) The regular expression to validate the email addresses agains. Undefined behavior will result
 *                      from an invalid expression.
 *
 * $validAddresses (reference) A reference which will be pointed to a list of email addresses which are valid.
 *
 * $invalidAddresses (reference) A reference which will be pointed to a list of email addresses which are invalid.
 *###
#macro(validateAddressFormat, $allAddresses, $emailRegex, $validAddresses, $invalidAddresses)
  #set($validAddresses = [])
  #set($invalidAddresses = [])
  #foreach($address in $allAddresses)
    #if("$!address" == '')
      ## Empty address, do nothing.
    #elseif($xcontext.getUtil().match($emailRegex, $address))
      #set($discard = $validAddresses.add($address))
    #else
      #set($discard = $invalidAddresses.add($address))      
    #end
  #end
#end
##
#*
 * Display a table of messages.
 *
 * $mail (Collection&lt;XObject&gt;) the messages to view.
 *
 * $fieldsToDisplay (List&lt;String&gt;) fields which should be displayed.
 *   Options include: sendingUser, subjectLine, statusCode, memo, recipient
 *
 * $isAdmin (Boolean) should the links point to displaying for admin or user (NOT FOR SECURITY)
 *
 *###
#macro(displayMessageTable, $mail, $fieldsToDisplay, $isAdmin)
    #foreach($field in $fieldsToDisplay)
      |=$msg.get("xe.invitation.displayMessageTable.$field")##
    #end

    #foreach($message in $mail)
      #foreach($field in $fieldsToDisplay)
        #if($field == 'sendingUser')
          |[[$escapetool.xml($message.getProperty("$field").getValue())]]##
        #elseif($field == 'subjectLine')
          |[[$escapetool.xml($message.getProperty('subjectLine').getValue())&gt;&gt;$doc.getFullName()?inspectCode=##
          ## If the user is an admin they will be linked to a different page.
          #if($isAdmin)
            3##
          #else
            2##
          #end
          &amp;messageID=$message.getProperty('messageID').getValue()]]##
        #elseif($field == 'statusCode')
          |#messageStatusForCode($message.getProperty('statusCode').getValue())##
        #else
          |$escapetool.xml($message.display($field, 'view'))##
        #end
      #end

    #end
#end
##
#*
 * Display a table of messages, in a div class="invitation" html element.
 *
 * $mail (Collection&lt;XObject&gt;) the messages to view.
 *
 * $fieldsToDisplay (List&lt;String&gt;) fields which should be displayed.
 *   Options include: sendingUser, subjectLine, statusCode, memo, recipient
 *
 * $isAdmin (Boolean) should the links point to displaying for admin or user (NOT FOR SECURITY)
 *
 *###
#macro(displayMessageTableInDiv, $mail, $fieldsToDisplay, $isAdmin)

  {{html wiki=true}}
   &lt;div class="invitation"&gt;
    #displayMessageTable($mail, $fieldsToDisplay, $isAdmin)
   &lt;/div&gt;
  {{/html}}

#end
##
#*
 * Get only messages of unique groups. If one message in a group is marked as spam it will be the one included.
 *
 * $mail (Collection&lt;XObject&gt;) the messages to search through.
 *
 * $mailOut (List&lt;XObject&gt;) will be populated with messages which are each of a different group.
 *###
#macro(getMessagesOfUniqueGroups, $mail, $mailOut)
  #set($messageByGroup = {})
  #foreach($message in $mail)
    #set($messageGroup = $message.getProperty('messageGroupID').getValue())
    #if(!$messageByGroup.containsKey($messageGroup) || $message.getProperty('statusCode').getValue() == '5')
      #set($discard = $messageByGroup.put($messageGroup, $message))
    #end
  #end
  #set($discard = $mailOut.addAll($messageByGroup.values()))
#end
##
#*
 * Get only messages of given group.
 *
 * $mail (Collection&lt;XObject&gt;) the messages to search though.
 *
 * $groupID (Double) the ID of the group to get messages from.
 *
 * $mailOut (List&lt;XObject&gt;) will be populated with messages which are from that group and found in $mail
 *###
#macro(getMessagesInGroup, $mail, $groupID, $mailOut)
  #foreach($message in $mail)
    #if($groupID == $message.getProperty('messageGroupID').getValue())
      #set($discard = $mailOut.add($message))
    #end
  #end
#end
##
#*
 * Get only messages by a given sender
 *
 * $mail (Collection&lt;XObject&gt;) the messages to search though.
 *
 * $sender (String) the name of the user (document name) who sent the message.
 *
 * $mailOut (List&lt;XObject&gt;) will be populated with messages which are sent by $user
 *###
#macro(getMessagesBySender, $mail, $sender, $mailOut)
  #foreach($message in $mail)
    #if($sender == $message.getProperty('sendingUser').getValue())
      #set($discard = $mailOut.add($message))
    #end
  #end
#end
##
#*
 * Either a user wants to inspect their old messages or an admin wants to inspect all old messages.
 *
 * Inspection Codes:
 * 0 - View all message groups (only works if admin.)
 * 1 - View all of my message groups
 * 2 - View all messages in group
 * 3 - View all messages in group as admin
 *
 * $mail (Map&lt;String, XObject&gt;) map of messages by their ID.
 *
 * $inspectCode the numerical code for what the user wants to do.
 *
 * $isAdmin (Boolean) is the current user to be regarded as a mail administrator.
 *
 * $messageID (String) ID of a message in the group to show. Only needed if $inspectCode == 2 or 3
 *###
#macro(inspectMessages, $mail, $inspectCode, $isAdmin, $messageID)
  #if($inspectCode == '0' &amp;&amp; $isAdmin)
    ## All message groups.
    #set($uniqueMail = [])
    #getMessagesOfUniqueGroups($mail.values(), $uniqueMail)
    #displayMessageTableInDiv($uniqueMail, ['sentDate', 'sendingUser', 'subjectLine', 'statusCode'], $isAdmin)
  #elseif($inspectCode == '1')
    ## My message groups.
    #set($myMail = [])
    #getMessagesBySender($mail.values(), $xcontext.getUser(), $myMail)
    #set($myUniqueMail = [])
    #getMessagesOfUniqueGroups($myMail, $myUniqueMail)
    #displayMessageTableInDiv($myUniqueMail, ['sentDate', 'subjectLine'])
  #elseif($inspectCode == '2')
    ## Inspect a single message group
    #set($myMail = [])
    #getMessagesBySender($mail.values(), $xcontext.getUser(), $myMail)
    #set($myMailInGroup = [])
    #getMessagesInGroup($myMail, $mail.get($messageID).getProperty('messageGroupID').getValue(), $myMailInGroup)
    #displayMessageTableInDiv($uniqueMail, ['sentDate', 'recipient', 'statusCode'])
    #displayMessage($myMailInGroup.get(0))
  #elseif($inspectCode == '3' &amp;&amp; $isAdmin)
    ## Inspect a single message group as admin
    #set($mailInGroup = [])
    #getMessagesInGroup($mail.values(), $mail.get($messageID).getProperty('messageGroupID').getValue(), $mailInGroup)
    #displayMessageTableInDiv($mailInGroup, ['sentDate', 'sendingUser', 'recipient', 'statusCode'])
    #displayMessage($mailInGroup.get(0))
  #end
#end
##
#*
 * Display a message for the sender (preview) or for the admin (review sent messages)
 *
 * $mail (XObject representing email message) the message to view
 *
 * $recipients (List&lt;String&gt;) (Optional) the list of email addresses to override the list provided by $mail
 *                                       used for preview because createMailFromTemplate will exclude addresses
 *                                       which are invalid and we want to show the invalid addresses to the
 *                                       user to tell them that they need to correct them.
 *
 * $emailRegex (String) (Optional) the regular expression for an email message. Required if you wish to override
 *                                 the recipients list by specifying $recipients. An invalid regular expression
 *                                 will lead to undefined results.
 *###
#macro(displayMessage, $mail, $recipients, $emailRegex)

  {{html wiki=false clean=false}}
  &lt;div class="invitation"&gt;
   &lt;strong&gt;$msg.get('xe.invitation.previewLabel')&lt;/strong&gt;
   &lt;div class="invitation invitation-preview"&gt;
    ## get the lists of valid and invalid email addresses.
    #set($invalidAddresses = [])
    #if("$!recipients" == '' || "$!emailRegex" == '')
      #set($recipients = [$mail.getProperty('recipient').getValue().trim()])
    #else
      #set($sendTo = [])
      #validateAddressFormat($recipients, $emailRegex, $sendTo, $invalidAddresses)
    #end
    ## Print the email addresses to be sent to.
    ## To:
    &lt;strong&gt;$msg.get('xe.invitation.toLabel')&lt;/strong&gt;
    &lt;div class="invitation-preview field"&gt;
     #foreach($recipient in $recipients)
       #if($invalidAddresses.contains($recipient))
         &lt;span class="invalid-address"&gt;$!escapetool.html($!recipient)&lt;/span&gt; ##
       #else
         $!escapetool.html($!recipient) ##
       #end
     #end
    &amp;nbsp; ## used to make the field the correct size if it's empty.
    &lt;/div&gt;
    ## Tell the user that some of the email addresses are invalid.
    #if($invalidAddresses.size() &gt; 0)
      &lt;p class="invalid-address-message"&gt;
       {{error}}
        #if($recipients.size() == 1)
          ## The email address given is invalid and will not be sent to.
          $msg.get('xe.invitation.displayMessage.theAddressIsInvalid')
        #else
          #if($invalidAddresses.size() &gt; 1)
            $msg.get('xe.invitation.displayMessage.someAddressesAreInvalid', [$invalidAddresses.size()])
          #else
            $msg.get('xe.invitation.displayMessage.anAddressesIsInvalid')
          #end
        #end
       {{/error}}
      &lt;/p&gt;
    #end
     ## Subject:
     &lt;strong&gt;$msg.get('xe.invitation.subjectLabel')&lt;/strong&gt;
    &lt;div class="invitation-preview field"&gt;
     $escapetool.html($mail.getProperty('subjectLine').getValue())
    &lt;/div&gt;
    ## Message:
    &lt;strong&gt;$msg.get('xe.invitation.contentLabel')&lt;/strong&gt;
    &lt;div class="invitation-preview field"&gt;
     $mail.getProperty('messageBody').getValue()
    &lt;/div&gt;
   &lt;/div&gt;
  &lt;/div&gt;
  {{/html}}

#end
##
#*
 * Display a form for typing up an invitation email.
 *
 * $recipientString (String) What should be filled in to the field for recipients.
 *
 * $subjectLine (String) What should be put in the subject line by default.
 *
 * $messageBody (String) What should be put in the content of the message by default.
 *
 * $hasEdit (boolean) True if the current user has permission to edit this page.
 *                    If so then they can send to multiple addresses at once.
 *###
#macro(displayForm, $recipientString, $subjectLine, $messageBody, $hasEdit)

  {{html clean="false" wiki="false"}}
  &lt;form action="$doc.getURL('view')" method="post" class="invitation"&gt;
   &lt;dl&gt;
    ## Who you are inviting:
    &lt;dt&gt;&lt;label for="recipients"&gt;$msg.get('xe.invitation.toLabel')&lt;/label&gt;&lt;/dt&gt;
    ## If the user has edit access on this document, then we should allow them to send to multiple email addresses.
    #if($hasEdit)
      &lt;dd&gt;
       &lt;textarea cols="75" name="recipients" rows="3" id="recipients"&gt;##
        $!recipientString##
       &lt;/textarea&gt;
      &lt;/dd&gt;
    #else
      &lt;dd&gt;&lt;input type="text" size="54" name="recipients" id="recipients" value="$!recipientString" /&gt;&lt;/dd&gt;
    #end
    ## Subject line:
    &lt;dt&gt;&lt;label for="subjectLine"&gt;$msg.get('xe.invitation.subjectLabel')&lt;/label&gt;&lt;/dt&gt;
    &lt;dd&gt;
     &lt;input type="text" size="54" name="subjectLine" id="subjectLine" value="$!escapetool.html($!subjectLine)" /&gt;
    &lt;/dd&gt;
    ## Invitation message:
    &lt;dt&gt;&lt;label for="messageBody"&gt;$msg.get('xe.invitation.contentLabel')&lt;/label&gt;&lt;/dt&gt;
    &lt;dd&gt;
     &lt;textarea cols="75" name="messageBody" rows="10" id="messageBody"&gt;##
      $!escapetool.html($!messageBody)##
     &lt;/textarea&gt;
    &lt;/dd&gt;
   &lt;/dl&gt;
   &lt;div class="bottombuttons"&gt;
    &lt;div class="buttons"&gt;
     &lt;span class="buttonwrapper"&gt;
      ## Preview
      &lt;input type="submit" class="button" name="preview" value="$msg.get('xe.invitation.displayForm.preview')" /&gt;
     &lt;/span&gt;
     &lt;span class="buttonwrapper"&gt;
      ## Send Mail
      &lt;input type="submit" class="button" name="sendMail" value="$msg.get('xe.invitation.displayForm.sendMail')" /&gt;
     &lt;/span&gt;
    &lt;/div&gt;
   &lt;/div&gt;
  &lt;/form&gt;
  {{/html}}

#end
##
#*
 * Display some tools for users who have edit right on this page.
 * Displays link to the administration application where this page can be configured and also a link to view the
 * list of messages already sent.
 *
 * $inspectCode (Integer) Number signifying what the user is looking at.
 *###
#macro(displayAdministrativeTools)
  ## Administrative Tools
  = $msg.get('xe.invitation.adminTools.heading') =
  * {{html}}&lt;a href="$xwiki.getURL('XWikiPreferences', 'admin', 'admin=globaladmin&amp;section=Invitation')"&gt;##
      ## Click here to configure the friend inviter
      $msg.get('xe.invitation.adminTools.configureLink')##
    &lt;/a&gt;{{/html}}
  ## View all invitations
  #if("$inspectCode" != '0')
    * [[$msg.get('xe.invitation.adminTools.allInvitationsLink')&gt;&gt;$doc.getFullName()?inspectCode=0]]
  #else
    * **$msg.get('xe.invitation.adminTools.allInvitationsLink')**
  #end
#end
##
#*
 * Display some tools for users.
 *
 * $inspectCode (Integer) Number signifying what the user is looking at.
 *###
#macro(displayUserTools, $inspectCode)
  ## Administrative Tools
  = $msg.get('xe.invitation.tools.heading') =
  ## My invitations
  #if("$inspectCode" != '1')
    * [[$msg.get('xe.invitation.tools.myInvitationsLink')&gt;&gt;$doc.getFullName()?inspectCode=1]]
  #else
    * **$msg.get('xe.invitation.tools.myInvitationsLink')**
  #end
#end
##
#*
 * Has mail sent by the current user been reported as spam?
 * will return 'false' if not otherwise will return 'true'
 * if a message was reported as spam but an admin has marked the situation
 * as handled then this macro will return 'false'
 *
 * $emailClass (String) the name of the document containing the XClass that represents email.
 *
 * $emailContainer (Document) the document is where the mail objects are stored.
 *###
#macro(isUserReportedSpammer, $emailClass, $emailContainer)
  #set($out = 'false')
  #foreach($message in $emailContainer.getObjects($emailClass))
     #if($message.getProperty('sendingUser').getValue() == $xcontext.getUser()
          &amp;&amp; $message.getProperty('statusCode').getValue() != '5')
     ##
       #set($out = 'true')
     #end
  #end
  $out##
#end
##
#*
 * Block view access for XWikiAllGroup and XWikiGuest.
 *
 * $document Document to configure right in.
 *###
#macro(disallowViewForAll, $document)
  #set($rightObj = $document.newObject('XWiki.XWikiRights'))
  #set($discard = $rightObj.set('groups', 'XWiki.XWikiAllGroup'))
  #set($discard = $rightObj.set('users', 'XWiki.XWikiGuest'))
  #set($discard = $rightObj.set('levels', 'view'))
  #set($discard = $rightObj.set('allow', '0'))
#end
##
#*
 * Get the status of the current message for it's code.
 * 0 - unsent
 * 1 - pending (sent and awating a response)
 * 2 - accepted (sent and accepted by recipient)
 * 3 - declined (sent and declined by recipient)
 * 4 - canceled (sent then canceled by sender)
 * 5 - reported as spam (by recipient)
 * 6 - reported as spam and investigsted (by admin)
 * else - unknown status
 *
 * $statusCode (Integer) the numbered code for the status of the message.
 *###
#macro(messageStatusForCode, $statusCode)
  #set($sc = $mathtool.toInteger($statusCode))
  #if($sc == 0)
    $msg.get('xe.invitation.messageStatus.unsent')##
  #elseif($sc == 1)
    $msg.get('xe.invitation.messageStatus.pending')##
  #elseif($sc == 2)
    $msg.get('xe.invitation.messageStatus.accepted')##
  #elseif($sc == 3)
    $msg.get('xe.invitation.messageStatus.declined')##
  #elseif($sc == 4)
    $msg.get('xe.invitation.messageStatus.canceled')##
  #elseif($sc == 5)
    $msg.get('xe.invitation.messageStatus.reported')##
  #elseif($sc == 6)
    $msg.get('xe.invitation.messageStatus.investigated')##
  #elseif($sc == 7)
    $msg.get('xe.invitation.messageStatus.sendingFailed')##
  #else
    $msg.get('xe.invitation.messageStatus.unknown', [$sc])##
  #end
#end
##
#*
 * Do an action on a message.
 *
 * Action codes:
 * 2 - accept (message status code must be 1)
 * 3 - decline (message status code must be 1)
 * 4 - cancel (must be message sender or admin, message status code must be 1)
 * 5 - report as spam (message status code must not be 6)
 * 6 - investigate spam report (must be admin and message status code must be 5)
 * else - unknown status
 *
 * $messageID (String) the unique ID for the message to act upon.
 *
 * $actionCode (Integer) the numbered code for the status of the message.
 *
 * $memo (String) an action specific message to attach to the mail EG: reason for declining, 
 *                or results of spam investigation.
 *
 * $confirm (Boolean) are you sure you want to do this?
 *
 * $isAdmin (Boolean) is the current user a mail administrator?
 *
 * $messages (Map&lt;String, XObject&gt;) the map of stored messages by their id.
 *
 * $emailContainer (Document) the document to look in for mail objects.
 *###
#macro(doAction, $messageID, $actionCode, $memo, $confirm, $isAdmin, $messages, $emailContainer)
  ## 1. validate action code.
  #set($act = $mathtool.toInteger($actionCode))
  #if(!$act || $act &lt; 2 || $act &gt; 6)
    ## This should not happen, not translating.
    Invalid action.
  #end
  ##
  ## 2. get message. (If it's invalid will be '' and each action handles differently.)
  #set($message = '')
  #set($message = $messages.get($messageID))
  #if($message != '')
    #set($status = $message.getProperty('statusCode').getValue())
  #end

  ## 3. Do action.
  #if($act == 2)
    ## Accept invitation. &lt;------------------------------------------------------------------------
    #if("$!message" == '')
      {{error}}$msg.get('xe.invitation.doAction.accept.noMessageFound'){{/error}}
    #elseif($status == '2')
      ## already accepted
      {{error}}$msg.get('xe.invitation.doAction.accept.alreadyAccepted'){{/error}}
    #elseif($status == '3')
      ## already declined
      {{error}}$msg.get('xe.invitation.doAction.accept.alreadyDeclined'){{/error}}
    #elseif($status == '4')
      ## invitation canceled.
      {{error}}$msg.get('xe.invitation.doAction.accept.invitationCanceled'){{/error}}
      #if($message.getProperty('memo').getValue() != '')
        $msg.get('xe.invitation.doAction.invitationCanceledMemo',
                 [$xwiki.getUserName($message.getProperty('sendingUser').getValue(), false)])
        $message.getProperty('memo').getValue()
      #end
    #elseif($status == '5' || $status == '6')
      ## reported as spam, nolonger valid.
      {{error}}$msg.get('xe.invitation.doAction.accept.alreadyReportedAsSpam'){{/error}}
    #elseif($status != '1')
      {{error}}$msg.get('xe.invitation.doAction.invalidStatus', ["#messageStatusForCode($status)"]){{/error}}
    #else
      $response.sendRedirect($xwiki.getURL('XWiki.Register', 'register'))
      $message.set('statusCode', '2')##
      $emailContainer.saveAsAuthor($msg.get('xe.invitation.doAction.accept.saveComment'))
    #end
  #elseif($act == 3)
    ## Decline Invitation &lt;------------------------------------------------------------------------
    = $msg.get('xe.invitation.doAction.decline.heading') =
    #if("$!message" == '')
      {{error}}$msg.get('xe.invitation.doAction.decline.noMessageFound'){{/error}}
    #elseif($status == '2')
      ## already accepted
      {{error}}$msg.get('xe.invitation.doAction.decline.alreadyAccepted'){{/error}}
    #elseif($status == '3')
      ## already declined
      {{error}}$msg.get('xe.invitation.doAction.decline.alreadyDeclined'){{/error}}
    #elseif($status == '4')
      ## invitation canceled.
      {{error}}$msg.get('xe.invitation.doAction.decline.invitationCanceled'){{/error}}

       #if($message.getProperty('memo').getValue() != '')
         $msg.get('xe.invitation.doAction.invitationCanceledMemo', 
                  [$xwiki.getUserName($message.getProperty('sendingUser').getValue(), false)])
         $message.getProperty('memo').getValue()
       #end
    #elseif($status == '5' || $status == '6')
      ## reported as spam, nolonger valid.
      {{error}}$msg.get('xe.invitation.doAction.decline.alreadyReportedAsSpam'){{/error}}
    #elseif($status != '1')
      {{error}}$msg.get('xe.invitation.doAction.invalidStatus', ["#messageStatusForCode($status)"]){{/error}}
    #elseif($confirm)
      $message.set('statusCode', '3')##
      $message.set('memo', $memo)##
      $emailContainer.saveAsAuthor($msg.get('xe.invitation.doAction.decline.saveComment'))
      {{info}}$msg.get('xe.invitation.doAction.decline.success'){{/info}}
    #else
      ## Are you sure?...
      #displayActionConfirmationForm($messageID, $act, $msg.get('xe.invitation.doAction.decline.memoLabel', 
                                                                [$xwiki.getUserName($message.getProperty('sendingUser').getValue(),
                                                                                    false)]),
                                     $msg.get('xe.invitation.doAction.decline.confirmLabel'))
    #end
  #elseif($act == 4)
    ## Cancel Invitation &lt;-------------------------------------------------------------------------
    = $msg.get('xe.invitation.doAction.cancel.heading') =
    #if("$!message" == '')
      ## No message found by that id.
      $msg.get('xe.invitation.doAction.cancel.noMessageFound')
    #elseif($confirm)
      $message.set('statusCode', '5')##
      $message.set('memo', $memo)##
      $emailContainer.saveAsAuthor($msg.get('xe.invitation.doAction.cancel.saveComment'))
      ## Your report has been logged, sorry for the inconvienence.
      $msg.get('xe.invitation.doAction.cancel.success')
    #else
      ## Are you sure?...
      == $msg.get('xe.invitation.doAction.cancel.areYouSure') ==
      #displayActionConfirmationForm($messageID, $act, $msg.get('xe.invitation.doAction.cancel.memoLabel'),
                                     $msg.get('xe.invitation.doAction.confirmLabel'))
      #displayMessage($message, '', '')
    #end
  #elseif($act == 5)
    ## Report Abuse &lt;------------------------------------------------------------------------------
    = $msg.get('xe.invitation.doAction.reportSpam.heading') =
    #if("$!message" == '')
      ## No message found by that id.
      $msg.get('xe.invitation.doAction.reportSpam.noMessageFound')
    #elseif($confirm)
      $message.set('statusCode', '5')##
      $message.set('memo', $memo)##
      $emailContainer.saveAsAuthor($msg.get('xe.invitation.doAction.reportSpam.reportSaveComment'))
      ## Your report has been logged, sorry for the inconvienence.
      $msg.get('xe.invitation.doAction.reportSpam.success')
    #else
      ## Are you sure?...
      == $msg.get('xe.invitation.doAction.reportSpam.areYouSure') ==
      #displayActionConfirmationForm($messageID, $act, $msg.get('xe.invitation.doAction.reportSpam.memoLabel'),
                                     $msg.get('xe.invitation.doAction.confirmLabel'))
      #displayMessage($message, '', '')
    #end
  #elseif($act == 6)
    ## Declare spam investigated &lt;-----------------------------------------------------------------
    #if(!$isAdmin)
      {{error}}$msg.get('xe.invitation.doAction.lackingPermission'){{/error}}
    #elseif("$!message" == '')
      {{error}}$msg.get('xe.invitation.doAction.noMessageFound'){{/error}}
    #elseif($status != '5')
      {{error}}$msg.get('xe.invitation.doAction.incorrectMessageStatus', ["#messageStatusForCode($status)"]){{/error}}
    #elseif($confirm)
      $message.set('statusCode', '6')##
      $message.set('memo', "$xcontext.getUser() $memo")##
      $emailContainer.saveAsAuthor($msg.get('xe.invitation.doAction.handleSpam.reportHandledSaveComment', 
                                            [$xcontext.getUser()]))
    #else
      ## Are you sure?...
      #displayActionConfirmationForm($messageID, $act, $msg.get('xe.invitation.doAction.handleSpam.memoLabel'),
                                     $msg.get('xe.invitation.doAction.handleSpam.confirmLabel'))
      #displayMessage($message, '', '')
    #end
  #else
    ## 2+2=5
    Internal error (Invalid action)
  #end
#end
##
#*
 * Display a form allowing a user to confirm doing an action.
 *
 * $messageID (String) the unique ID for the message to act upon.
 *
 * $actionCode (Integer) the numbered code for the status of the message.
 *
 * $memoLabel (String) what the memo field should be labeled.
 *
 * $confirmLabel (String) what the confirm button should say.
 *###
#macro(displayActionConfirmationForm, $messageID, $actionCode, $memoLabel, $confirmLabel)
  {{html wiki=false clean=false}}
  &lt;div class="invitation"&gt;
   &lt;form action="", method="POST"&gt;
    ##
    &lt;input type="hidden" name="messageID" value="$escapetool.xml($messageID)" /&gt;
    &lt;input type="hidden" name="actionCode" value="$escapetool.xml($actionCode)" /&gt;
    ##
    &lt;dl&gt;
     &lt;dt&gt;&lt;label for="memo"&gt;$memoLabel&lt;/label&gt;&lt;/dt&gt;
     &lt;dd&gt;&lt;input type="text" size="54" name="memo" /&gt;&lt;/dd&gt;
    &lt;/dl&gt;
    &lt;div class="bottombuttons"&gt;
     &lt;div class="buttons"&gt;
      &lt;span class="buttonwrapper"&gt;
       &lt;input type="submit" class="button" name="confirm" value="$confirmLabel" /&gt;
      &lt;/span&gt;
     &lt;/div&gt;
    &lt;/div&gt;
   &lt;/form&gt;
  &lt;/div&gt;
  {{/html}}
#end
##{{/velocity}}</content></xwikidoc>
