/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.annotation.renderer;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;

import org.xwiki.annotation.renderer.AnnotationEvent.AnnotationEventType;

/**
 * Holds a list of annotation bookmarks given by the rendering event when they took place, along with the offset inside
 * this event (the text offset in the rendered value for the event) and the annotation event. Note that the offset makes
 * sense only for events generated by blocks which do not have children (normally those that don't inherit from
 * FatherBlock but also the father blocks without children). <br/>
 * Stored as this kind of map to speedup the access to all the annotation events in a given event, in the order of their
 * offsets. For the same offset, the annotation end events are stored before the start events, and within these
 * categories, the order is given by the order in which the events were added.
 * 
 * @version $Id$
 */
public class AnnotationBookmarks extends HashMap<EventReference, SortedMap<Integer, List<AnnotationEvent>>>
{
    /**
     * Serial version number of this class.
     */
    private static final long serialVersionUID = 2857213816155062683L;

    /**
     * Adds an annotation bookmark in this list of bookmarks.
     * 
     * @param renderingEvent the rendering event where the annotation should be bookmarked
     * @param offset the offset of the annotation event inside this rendering event
     * @param annotationEvent the annotation event to bookmark
     */
    public void addBookmark(EventReference renderingEvent, AnnotationEvent annotationEvent, int offset)
    {
        SortedMap<Integer, List<AnnotationEvent>> mappings = get(renderingEvent);
        if (mappings == null) {
            mappings = new TreeMap<Integer, List<AnnotationEvent>>();
            put(renderingEvent, mappings);
        }
        List<AnnotationEvent> events = mappings.get(offset);
        if (events == null) {
            events = new LinkedList<AnnotationEvent>();
            mappings.put(offset, events);
        }

        addAnnotationEvent(annotationEvent, events);
    }

    /**
     * Helper function to help add an annotation event to the list of events, and keep the restriction that end events
     * are stored before start events. Otherwise put, for the same offset, annotations end first and open after.
     * 
     * @param evt the annotation event to add to the list
     * @param list the annotation events list to add the event to
     */
    protected void addAnnotationEvent(AnnotationEvent evt, List<AnnotationEvent> list)
    {
        // if there is no event in the list, or the event is a start event or there is no start event in the list, just
        // append the event to the end of the list
        if (list.size() == 0 || evt.getType() == AnnotationEventType.START
            || list.get(list.size() - 1).getType() == AnnotationEventType.END) {
            list.add(evt);
        } else {
            // find the first start event and add before it
            int index = 0;
            for (index = 0; index < list.size() && list.get(index).getType() != AnnotationEventType.START; index++) {
                // nothing, it will stop at first start event
            }
            list.add(index, evt);
        }
    }
}
