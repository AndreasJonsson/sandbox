<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
<web>Panels</web>
<name>AnnotationManager</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1240502446000</creationDate>
<date>1260811068000</date>
<contentUpdateDate>1260811068000</contentUpdateDate>
<version>1.0</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>Panels.PanelClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<category>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>category</name>
<number>5</number>
<prettyName>Category</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>Information|Navigation|Tools|Administration|Other</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</category>
<content>
<editor>Text</editor>
<name>content</name>
<number>4</number>
<prettyName>Content</prettyName>
<rows>25</rows>
<size>60</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</content>
<description>
<editor>Text</editor>
<name>description</name>
<number>3</number>
<prettyName>Description</prettyName>
<rows>5</rows>
<size>40</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</description>
<name>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>40</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<type>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>type</name>
<number>2</number>
<prettyName>Panel type</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>view|edit</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</type>
</class>
<name>Panels.AnnotationManager</name>
<number>0</number>
<className>Panels.PanelClass</className>
<guid>ae1cdc01-922e-4cc2-8e0b-239e49b62360</guid>
<property>
<category></category>
</property>
<property>
<content>## Check if annotations are active and display panels only when annotations are active
#set ($active = false)
#set($confObj = $xwiki.getDocument("XWiki.AnnotationConfig").getObject("XWiki.AnnotationConfig"))
#set($active = $confObj.getProperty("activated").value == 1)
#if($active)
  ## the annotation form, hidden by default which will be made visible by the client js upon annotation add
  &lt;div id="annotationPanel" style="display:none"&gt;
    &lt;label for="annotationInput"&gt;Annotation :&amp;nbsp;&lt;/label&gt;
    &lt;textarea cols="10" rows="5" id="annotationInput" name="annotationInput" value="test"&gt;&lt;/textarea&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" id="annotationRequest" name="annotationRequest" class="button" value="Annotate" /&gt;&lt;/span&gt;
    &lt;span class="buttonwrapper"&gt;&lt;input type="submit" id="cancelRequest" name="cancelRequest" class="button" value="Cancel" /&gt;&lt;/span&gt;
  &lt;/div&gt;

  ## the annotations panel
  &lt;div id="annotationResume" style="display:block"&gt;
  #panelheader('Annotations')
  #set ($annotations = $doc.getObjects('XWiki.AnnotationClass'))
  ## build annotations js array to pass to the js functions toggling annotation display
  #set ($annArray="[")
  #foreach ($annotation in $annotations)
    #if($annotation.get('state') == 'SAFE' || $annotation.get('state') == 'UPDATED')
      ## default this color on yellow if nothing else is found
      ## todo: should be set in the config document
      #set($color = '#FFFF00')
      #set($color = $xwiki.getDocument($annotation.author).getObject('XWiki.XWikiUsers').annotationColor)
      ## add the annotation text in a div, which toggles annotation display on hover and a delete button
      &lt;div onClick="XWiki.Annotation.getInstance().toggleMode($annotation.get('annotationID'))" onMouseOut="XWiki.Annotation.getInstance().hideAnnotation($annotation.get('annotationID'))" onMouseOver="XWiki.Annotation.getInstance().showAnnotation($annotation.get('annotationID'), '$color')"&gt;
        &lt;div id="annotext_ID$annotation.get('annotationID')" class="truncate"&gt;*$annotation.get('annotation')*&lt;/div&gt;
        *...* by &lt;span style="background: $color"&gt;[$annotation.get('author')]&lt;/span&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/delete.gif')" onClick="XWiki.Annotation.getInstance().removeAnnotation($annotation.get('annotationID'))"/&gt;
      &lt;/div&gt;
      ## append this annotation to the annotation array
      #set($annJSON = '{\"id\" : \"' + $annotation.annotationID + '\", \"color\" : \"' + $color + '\"}')
      ## if it's not the first annotation, add a comma
      #if($annArray != "[")
        #set ($annArray = $annArray + ",")
      #end
      #set ($annArray = $annArray + $annJSON)
    #end
  #end
  #set ($annArray = $annArray + "]")

  ## show and hide buttons
  {pre}
  &lt;input type="submit" onClick='XWiki.Annotation.getInstance().showAllAnnotation("${annArray}")' name="showAllRequest" class="button" value="Show all" /&gt;
  &lt;input type="submit" onClick='XWiki.Annotation.getInstance().hideAllAnnotation("${annArray}")' name="hideAllRequest" class="button" value="Hide all"/&gt;
  {/pre}

  ## and the edit panel link, as for all panels
  #if ($xwiki.hasAdminRights())
   &lt;p style="font-size:0.75em;padding-left:8px;"&gt;&lt;a href="$xwiki.getDocument("Panels.AnnotationManager").getURL("inline")"&gt;$msg.get("xe.panels.edit")&lt;/a&gt;&lt;/p&gt;
  #end
  #panelfooter()
  &lt;/div&gt;
#end</content>
</property>
<property>
<description>This panel allow user to edit annotation.</description>
</property>
<property>
<name>Annotation editor</name>
</property>
<property>
<type>view</type>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>onDemand=On demand|always=Always</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>Panels.AnnotationManager</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>d0e57234-f945-4900-8ac4-977156e27729</guid>
<property>
<cache>default</cache>
</property>
<property>
<code>if (typeof (XWiki) == 'undefined') {
    XWiki = new Object();
}

XWiki.Annotation = function() {
    this.display = [];
    this.annotationsArg = [];

    this.annotatedDocumentFlag = 0;
    this.onAnnotationFlag = 0;

    // Step of annotation context expansion
    this.step = 5;
    // offset of annotation target in context
    this.intraOffset = 0;
    // context of annotation target
    this.context = '';
    // annotation target &lt;=&gt; result of selection
    this.selection = '';
    // meta-data added
    this.annotationText = '';

    // Setting up listeners
    document.observe('keydown', this.onKeyDown);
    document.observe('keyup', this.onKeyUp);
    document.observe('mouseup', this.onMouseUp);
    Element.observe($('annotationRequest'), 'click',
            this.onAddAnnotationRequest);
    Element
            .observe($('cancelRequest'), 'click',
                    this.onCancelAnnotationRequest);
};

XWiki.Annotation.prototype = {
    /* Utils */
    getDocumentInfos : function() {
        // TODO: get these from the XWiki object or meta tags
        var space = '';
        var page = '';
        window.location.pathname.toString().scan(/\/[^\/]+/, function(match) {
            space = page;
            page = match[0];
        });
        if (space == '' || page == '') {
            return '';
        }
        // WebHome special case
        if (space == '/view') {
            space = page;
            page = '/WebHome';
        }
        space = space.replace('/', '');
        page = page.replace('/', '');
        return {
            host : location.host,
            'wiki' :  XWiki.currentWiki,
            'space' : space,
            'page' : page
        };
    },

    getXMLData : function() {
        return "&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?&gt;"
                + "&lt;annotationRequest xmlns=\"http://www.xwiki.org\"&gt;"
                + "&lt;initialSelection&gt;&lt;![CDATA["
                + XWiki.Annotation.getInstance().selection
                + "]]&gt;&lt;/initialSelection&gt;" + "&lt;selectionContext&gt;&lt;![CDATA["
                + XWiki.Annotation.getInstance().context
                + "]]&gt;&lt;/selectionContext&gt;" + "&lt;contextOffset&gt;"
                + XWiki.Annotation.getInstance().intraOffset
                + "&lt;/contextOffset&gt;" + "&lt;annotation&gt;&lt;![CDATA["
                + XWiki.Annotation.getInstance().annotationText
                + "]]&gt;&lt;/annotation&gt;" + "&lt;/annotationRequest&gt;";
    },

    /* Annotation Input Panel */
    showAnnotationInputPanel : function(x, y) {
        $('annotationInput').value = '';
        $('annotationPanel').style.display = 'block';
        $('annotationPanel').style.position = 'fixed';
        $('annotationPanel').style.top = (y - Element
                .getHeight($('annotationPanel'))) + 'px';
        $('annotationPanel').style.left = x + 'px';
    },

    hideAnnotationInputPanel : function() {
        $('annotationInput').value = '';
        $('annotationPanel').style.display = 'none';
    },

    /* Context computation */
    getRightDocument : function(node) {
        var text = '';
        if (node == $('xwikicontent')) {
            text = XWiki.Annotation.getInstance().getRightDocument(
                    node.parentNode);
        }
        for ( var current = node.nextSibling; current != null; current = current.nextSibling) {
            text += XWiki.Annotation.getInstance().getText(current);
        }
        return text;
    },

    getLeftDocument : function(node) {
        var text = '';
        if (node == $('xwikicontent')) {
            text = XWiki.Annotation.getInstance().getLeftDocument(
                    node.parentNode);
        }
        parent = node.parentNode;
        for ( var i = 0; i &lt; parent.childNodes.length
                &amp;&amp; parent.childNodes[i] != node; ++i) {
            text += XWiki.Annotation.getInstance()
                    .getText(parent.childNodes[i]);
        }
        return text;
    },

    getText : function(root) {
        var text = '';
        if (root.nodeType == root.TEXT_NODE) {
            text = root.textContent;
        } else {
            for ( var i = 0; i &lt; root.childNodes.length; i++) {
                text += XWiki.Annotation.getInstance().getText(
                        root.childNodes[i]);
            }
        }
        return text;
    },

    getContextInfos : function(initialRange) {
        var left = XWiki.Annotation.getInstance().getLeftDocument(
                initialRange.startContainer)
                + initialRange.startContainer.textContent.substring(0,
                        initialRange.startOffset);
        var subLeft = '';
        var right = initialRange.endContainer.textContent.substring(
                initialRange.endOffset,
                initialRange.endContainer.textContent.length)
                + XWiki.Annotation.getInstance().getRightDocument(
                        initialRange.endContainer);
        var subRight = '';
        var offset = 0;
        var context = initialRange.toString();
        var leftExpansion = 0;
        var rightExpansion = 0;
        while (subRight != right || subLeft != left) {
            var k = $('xwikicontent').textContent.indexOf(context);
            var l = $('xwikicontent').textContent.indexOf(context, k + 1);
            if (l == -1) {
                break;
            }
            leftExpansion = Math.min(left.length, leftExpansion
                    + XWiki.Annotation.getInstance().step);
            rightExpansion = Math.min(right.length, rightExpansion
                    + XWiki.Annotation.getInstance().step);
            subRight = right.substring(0, rightExpansion);
            subLeft = left.substring(left.length - leftExpansion, left.length);
            context = subLeft + XWiki.Annotation.getInstance().selection
                    + subRight;
            offset = Math.max(subLeft.length, 0);
        }
        return {
            co : context,
            off : offset
        };
    },

    /* Annotation Management Panel */
    addAnnotationEntry : function(anno, color) {
        var div = new Element(
                'div',
                {
                    'onClick' : 'XWiki.Annotation.getInstance().toggleMode(\'' + anno.annotationId + '\')',
                    'onMouseOut' : 'XWiki.Annotation.getInstance().hideAnnotation(\''
                            + anno.annotationId + '\', \'' + color + '\')',
                    'onMouseOver' : 'XWiki.Annotation.getInstance().showAnnotation(\''
                            + anno.annotationId + '\', \'' + color + '\')'
                });
        div.update(new Element('b').update(anno.annotation));
        div.insert({
            'bottom' : ' by '
        });
        var author = anno.author.substring(anno.author.indexOf('.') + 1,
                anno.author.length);
        var link = '/xwiki/bin/view/' + anno.author.replace('.', '/');
        var span = new Element('span', {
            'style' : 'background: ' + color
        }).update(new Element('a', {
            'href' : link
        }).update(author));
        div.insert({
            'bottom' : span
        });
        var img = new Element(
                'img',
                {
                    'src' : '/xwiki/resources/icons/silk/delete.gif',
                    'onClick' : 'XWiki.Annotation.getInstance().removeAnnotation(\'' + anno.annotationId + '\')'
                });
        div.insert({
            'bottom' : img
        });
        $('annotationResume').select('[class="xwikipanelcontents"]')[0]
                .insert({
                    'bottom' : div
                });
        XWiki.Annotation.getInstance().annotationsArg.push({
            'id' : anno.annotationId,
            'color' : color
        });
    },

    updateAnnotationResumeAux : function(items) {
        if (0 == items.length) {
            XWiki.Annotation.getInstance().addGlobalActionButtons();
        } else {
            var anno = items.shift();
            if(anno.state != 'SAFE' &amp;&amp; anno.state != 'UPDATED')
            {
              XWiki.Annotation.getInstance().updateAnnotationResumeAux(items);
              return;
            }
            var wiki = anno.author.split(':')[0];
            var localAuthor = anno.author.split(':')[1];
            // if there is no wiki in the username (user is already local), use XWiki.currentWiki for wiki and wiki for localAuthor
            if (!localAuthor) {
              localAuthor = wiki;
              wiki = XWiki.currentWiki;
            }
            var space = localAuthor.split('.')[0];
            var page = localAuthor.split('.')[1];
            var url = 'http://'
                    + location.host
                    + '/xwiki/rest/wikis/' + wiki + '/spaces/'
                    + space
                    + '/pages/'
                    + page
                    + '/objects/XWiki.XWikiUsers/0/properties/annotationColor?media=json';
            new Ajax.Request(url, {
                method : 'GET',
                onSuccess : function(transport) {
                    XWiki.Annotation.getInstance().addAnnotationEntry(anno,
                            transport.responseText.evalJSON().value);
                    XWiki.Annotation.getInstance().updateAnnotationResumeAux(
                            items);
                },
                onFailure : function() {
                    // window.alert('Callback Failure.');
            }
            });
        }
    },

    updateAnnotationResume : function(response) {
        $('annotationResume').select('[class="xwikipanelcontents"]')[0]
                .update();
        XWiki.Annotation.getInstance().annotationsArg = [];
        XWiki.Annotation.getInstance().updateAnnotationResumeAux(
                response.annotations);
    },

    addGlobalActionButtons : function() {
        var show = new Element(
                'input',
                {
                    'type' : 'submit',
                    'onClick' : 'XWiki.Annotation.getInstance().showAllAnnotation(\'' + Object
                            .toJSON(XWiki.Annotation.getInstance().annotationsArg) + '\')',
                    'value' : 'Show all',
                    'class' : 'button'
                });
        var hide = new Element(
                'input',
                {
                    'type' : 'submit',
                    'onClick' : 'XWiki.Annotation.getInstance().hideAllAnnotation(\'' + Object
                            .toJSON(XWiki.Annotation.getInstance().annotationsArg) + '\')',
                    'value' : 'Hide all',
                    'class' : 'button'
                });
        $('annotationResume').select('[class="xwikipanelcontents"]')[0]
                .insert({
                    'bottom' : show
                });
        $('annotationResume').select('[class="xwikipanelcontents"]')[0]
                .insert({
                    'bottom' : hide
                });
        XWiki.Annotation.getInstance().annotationsArg = [];
    },

    /* Annotation */
    /*
     * request for annotated document
     */
    getAnnotations : function(force) {
        if (XWiki.Annotation.getInstance().annotatedDocumentFlag == 1
                || force == 1) {
            XWiki.Annotation.getInstance().refreshDisplay();
            return;
        }
        XWiki.Annotation.getInstance().annotatedDocumentFlag = 1;
        var infos = XWiki.Annotation.getInstance().getDocumentInfos();
        var url = 'http://' + infos.host + '/xwiki/rest/wikis/' + infos.wiki + '/spaces/'
                + infos.space + '/pages/' + infos.page
                + '/annotation?media=json';
        new Ajax.Request(url, {
            method : 'GET',
            onSuccess : XWiki.Annotation.getInstance().getAnnotationsCallback,
            onFailure : XWiki.Annotation.getInstance().failureCallback
        });
    },

    removeAnnotation : function(id) {
        var infos = XWiki.Annotation.getInstance().getDocumentInfos();
        var url = 'http://' + infos.host + '/xwiki/rest/wikis/' + infos.wiki + '/spaces/'
                + infos.space + '/pages/' + infos.page + '/annotation/' + id
                + '?method=DELETE&amp;media=json';
        new Ajax.Request(url, {
            method : 'POST',
            onSuccess : XWiki.Annotation.getInstance().genericCallback,
            onFailure : XWiki.Annotation.getInstance().failureCallback
        });
    },

    addAnnotation : function() {
        var infos = XWiki.Annotation.getInstance().getDocumentInfos();
        var url = 'http://' + infos.host + '/xwiki/rest/wikis/' + infos.wiki + '/spaces/'
                + infos.space + '/pages/' + infos.page
                + '/annotation?method=PUT&amp;media=json';
        new Ajax.Request(url, {
            method : 'POST',
            contentType : 'text/xml',
            postBody : XWiki.Annotation.getInstance().getXMLData(),
            onSuccess : XWiki.Annotation.getInstance().genericCallback,
            onFailure : XWiki.Annotation.getInstance().failureCallback
        });
    },

    getAnnotationsCallback : function(transport) {
        var response = transport.responseText || "no response text";
        response = response.evalJSON();
        $('xwikicontent').replace(
                '&lt;div id="xwikicontent"&gt;' + response.source + '&lt;/div&gt;');
        XWiki.Annotation.getInstance().refreshDisplay();
    },

    genericCallback : function(transport) {
        var response = transport.responseText || "no response text";
        response = response.evalJSON();
        if (response.responseCode != 0) {
            // window.alert(response.responseCode);
        } else {
            $('xwikicontent').replace(
                    '&lt;div id="xwikicontent"&gt;' + response.source + '&lt;/div&gt;');
            XWiki.Annotation.getInstance().refreshDisplay();
            XWiki.Annotation.getInstance().updateAnnotationResume(response);
        }
    },

    failureCallback : function() {
        // window.alert('Callback Failure.');
    },

    /* Display */
    toggleMode : function(id) {
        var tmp = XWiki.Annotation.getInstance().display['ID' + id];
        tmp.mode = (tmp.mode != 'false') ? 'false' : 'true';
        XWiki.Annotation.getInstance().display['ID' + id] = tmp;
        if (XWiki.Annotation.getInstance().annotatedDocumentFlag == 0) {
            XWiki.Annotation.getInstance().requestAnnotatedDocument();
        } else {
            XWiki.Annotation.getInstance().refreshDisplay();
        }
    },

    refreshDisplay : function() {
        for ( var id in XWiki.Annotation.getInstance().display) {
            var tmp = XWiki.Annotation.getInstance().display[id];
            if (tmp.mode != 'false') {
                XWiki.Annotation.getInstance().highlightAnnotation(id,
                        tmp.color);
                if (tmp.mode == 'volatile') {
                    tmp.mode = 'false';
                    XWiki.Annotation.getInstance().display[id] = tmp;
                }
            } else {
                XWiki.Annotation.getInstance().unlightAnnotation(id);
            }
        }
    },

    unlightAnnotation : function(id) {
        var results = new Array();
        var iterator = document.evaluate("//span[contains(@class, '" + id
                + "')]", document, null,
                XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
        var item = iterator.iterateNext();
        while (item) {
            results.push(item);
            item = iterator.iterateNext();
        }
        for ( var i = 0; i &lt; results.length; ++i) {
            results[i].style.background = 'none';
        }
        var name = 'annotext_' + id;
        if ($(name)) {
            $(name).setAttribute('class', 'truncate');
        }
    },

    highlightAnnotation : function(id, color) {
        var results = new Array();
        var iterator = document.evaluate("//span[contains(@class, '" + id
                + "')]", document, null,
                XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
        var item = iterator.iterateNext();

        while (item) {
            results.push(item);
            item = iterator.iterateNext();
        }
        for ( var i = 0; i &lt; results.length; ++i) {
            results[i].style.background = color;
        }
        var name = 'annotext_' + id;
        if ($(name)) {
            $(name).setAttribute('class', 'untruncate');
        }
    },

    /* Annotation Display Management */
    showAnnotation : function(id, color) {
        XWiki.Annotation.getInstance()
                ._showAnnotation(id, color, 'volatile', 0);
    },

    _showAnnotation : function(id, color, mode, refresh) {
        if (typeof (XWiki.Annotation.getInstance().display['ID' + id]) == 'undefined'
                || XWiki.Annotation.getInstance().display['ID' + id].mode != 'true') {
            XWiki.Annotation.getInstance().display['ID' + id] = {
                color : color,
                mode : mode
            };
            XWiki.Annotation.getInstance().getAnnotations(refresh);
        }
    },

    showAllAnnotation : function(infos) {
        var annotations = infos.evalJSON();
        for ( var i = 0; i &lt; annotations.length; ++i) {
            XWiki.Annotation.getInstance()._showAnnotation(annotations[i].id,
                    annotations[i].color, 'true', 0);
        }
        XWiki.Annotation.getInstance().getAnnotations(1);
    },

    hideAnnotation : function(id, color) {
        XWiki.Annotation.getInstance()._hideAnnotation(id, color, 0)
    },

    _hideAnnotation : function(id, color, force) {
        if (typeof (XWiki.Annotation.getInstance().display['ID' + id]) == 'undefined'
                || XWiki.Annotation.getInstance().display['ID' + id].mode != 'true'
                || force == 1) {
            XWiki.Annotation.getInstance().display['ID' + id] = {
                color : color,
                mode : 'false'
            };
            XWiki.Annotation.getInstance().getAnnotations(force);
        }
    },

    hideAllAnnotation : function(infos) {
        var annotations = infos.evalJSON();
        for ( var i = 0; i &lt; annotations.length; ++i) {
            XWiki.Annotation.getInstance()._hideAnnotation(annotations[i].id,
                    annotations[i].color, 1);
        }
    },

    /* Events Management */
    onKeyDown : function(event) {
        if (event.keyCode == 17 || event.keyCode == 91) {
            window.getSelection().removeAllRanges();
            XWiki.Annotation.getInstance().onAnnotationFlag = 1;
        }
    },

    onKeyUp : function(event) {
        if (event.keyCode == 17 || event.keyCode == 91) {
            XWiki.Annotation.getInstance().onAnnotationFlag = 0;
        }
    },

    onMouseUp : function(event) {
        if (XWiki.Annotation.getInstance().onAnnotationFlag == 1) {
            var initialRange = window.getSelection().getRangeAt(0);
            XWiki.Annotation.getInstance().selection = initialRange.toString();
            var contextInfos = XWiki.Annotation.getInstance().getContextInfos(
                    initialRange);
            XWiki.Annotation.getInstance().context = contextInfos.co;
            XWiki.Annotation.getInstance().intraOffset = contextInfos.off;
            XWiki.Annotation.getInstance().showAnnotationInputPanel(
                    event.screenX, event.screenY);
        } else if (window.getSelection().rangeCount == 0
                || window.getSelection().getRangeAt(0).toString() == ''
                || XWiki.Annotation.getInstance().selection != '') {
            var node = event.target;
            while (node != $('annotationPanel') &amp;&amp; node != $('xwikicontent')
                    &amp;&amp; node != null) {
                node = node.parentNode;
            }
            if (node == null || node != $('annotationPanel')) {
                XWiki.Annotation.getInstance().hideAnnotationInputPanel();
            }
        }
    },

    onAddAnnotationRequest : function() {
        XWiki.Annotation.getInstance().annotationText = $('annotationInput')
                .getValue();
        XWiki.Annotation.getInstance().hideAnnotationInputPanel();
        XWiki.Annotation.getInstance().addAnnotation();
    },

    onCancelAnnotationRequest : function() {
        XWiki.Annotation.getInstance().hideAnnotationInputPanel();
        XWiki.Annotation.getInstance().selection = '';
    }
};

XWiki.Annotation.prototype.__singleton__ = null;

XWiki.Annotation.getInstance = function() {
    if (null == XWiki.Annotation.prototype.__singleton__)
        XWiki.Annotation.prototype.__singleton__ = new XWiki.Annotation();
    return XWiki.Annotation.prototype.__singleton__;
};

## only load if the annotations are configured as active
#set ($active = false)
#set($confObj = $xwiki.getDocument("XWiki.AnnotationConfig").getObject("XWiki.AnnotationConfig"))
#set($active = $confObj.getProperty("activated").value == 1)
#if($active)
(function() {
    function onDOMLoaded() {
        // should check if the annotations panel is present too, or the context action to be view, etc
        XWiki.Annotation.getInstance();
    }
    document.observe('dom:loaded', function(event) {
        onDOMLoaded();
    });
})();
#end
</code></property><property><name>Annotation Feature Client Side Code</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>always</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>onDemand=On demand|always=Always</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>Panels.AnnotationManager</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<guid>96e32b27-da3f-4c71-a4e5-f3d3d094b851</guid>
<property>
<cache></cache>
</property>
<property>
<code>.truncate {
  overflow: hidden;
  white-space: nowrap;
}
#annotationPanel textarea  {
  width: 100%;
}
.untruncate {
  overflow: inherit;
  white-space: inherit;
}

/* annotation form background and paddings */
#annotationPanel {
  background: #F5F5F5 none repeat scroll 0 0;
  border: 1px solid #EEEEEE;
  overflow: hidden;
  padding: 4px 8px;
}

/* annotation panel buttons style */
#annotationResume .button {
  margin-top: 3px;
}</code>
</property>
<property>
<name>Annotation Feature Style Sheet</name>
</property>
<property>
<parse>0</parse>
</property>
<property>
<use>always</use>
</property>
</object>
<content>#warning("Do not edit this macro inline, because the content will be messed up, use the objects editor to change it.")
#includeForm("Panels.PanelSheet")</content>
</xwikidoc>