/**
 *
 */

options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC=false;
  MULTI=true;
  VISITOR=false;
  NODE_DEFAULT_VOID=true;
  NODE_PACKAGE="net.sourceforge.velocidoc.parser";
  NODE_PREFIX="Doc";
}

PARSER_BEGIN(MacroParser)

// commented out this package name from original. DW, 7/99
package net.sourceforge.velocidoc.parser;
import java.io.*;
import java.util.*;
public class MacroParser
{
    boolean justAfterComment = false;
    DocFormalComment lastComment = null;
    Vector macroComments = new Vector();

    String comment = "";
    public DocTemplate parse() throws ParseException {
        DocTemplate t = this.Template();
        for (int i=t.jjtGetNumChildren(); i > 0 ; i--) {
            Node child = t.jjtGetChild(i-1);
            if (macroComments.contains(child)) {
                t.jjtRemoveChild(i-1);
            }
        }
        return t;
    }
    public static void main (String [] args) {
        try {
            FileInputStream fis = new FileInputStream("d:/test.vm");
            MacroParser parser = new MacroParser(fis);
            DocTemplate template = parser.Template();
            template.dump(">");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}


PARSER_END(MacroParser)

TOKEN_MGR_DECLS:
{
    Stack stateStack = new Stack();
    public boolean inDirective;
    private boolean inComment;
    private boolean inMacro;
    private StringBuffer currentMacro = new StringBuffer();

    public void resetCurrentMacro() {
       currentMacro = new StringBuffer();
    }

    public String getCurrentMacro() {
      return currentMacro.toString();
    }

    public void addToCurrentMacro(String data) {
      currentMacro.append(data);
    }

    /**
     *  pops a state off the stack, and restores paren counts
     *
     *  @return boolean : success of operation
     */
    public boolean stateStackPop()
    {
        Hashtable h;

        System.out.println("POP State ");
        System.out.println("State was now " + curLexState);

        try
        {
            h = (Hashtable) stateStack.pop();
        }
        catch( EmptyStackException e)
        {
            System.out.println("State is back to default");
            SwitchTo(DEFAULT);
            return false;
        }

        SwitchTo( ( (Integer) h.get("lexstate")).intValue() );
        System.out.println("State is now " + curLexState);

        return true;
    }

    /**
     *  pushes the current state onto the 'state stack',
     *  and maintains the parens counts
     *  public because we need it in PD & VM handling
     *
     *  @return boolean : success.  It can fail if the state machine
     *     gets messed up (do don't mess it up :)
     */
    public boolean stateStackPush()
    {
        System.out.println("PUSH State");
        Hashtable h = new Hashtable();
        h.put("lexstate", new Integer( curLexState ) );
        stateStack.push( h );
        return true;
    }

    /**
     *  Clears all state variables, resets to
     *  start values, clears stateStack.  Call
     *  before parsing.
     *  @return void
     */
    public void clearStateVars()
    {
        stateStack.clear();
        inDirective = false;
        inComment = false;
        return;
    }

}

/* WHITE SPACE */
<DEFAULT, IFORLOOP, IN_MACRO,IN_MACRO_ARGLIST,IN_DOC_PARAM_DESC>
SKIP :
{
  <SKIP_CHAR : (" " | ","| "\t"| "\n"| "\r"| "\f")> {
    if (inMacro)
      addToCurrentMacro(image.toString());
  }
}

/* COMMENTS */

TOKEN :
{
  <FORMAL_COMMENT_START : "#**" ~["#"]>
  {
    System.out.println("Start formal comment");
    inComment = true;
  } : IN_FORMAL_COMMENT
}

MORE :
{
    < "#*" ~["#"]>
    {
        System.out.println("Start standard comment");
        inComment = true;
    } : IN_MULTILINE_COMMENT
}

<IN_MULTILINE_COMMENT>
SKIP:
{
    < "*#" > {
        inComment = false;
        System.out.println("End standard comment");
    } : DEFAULT
    | < ~[] >
}

<IN_FORMAL_COMMENT>
TOKEN :
{
    <DOCPARAM : <PARAMTAG> (<WS>)+ >
    {
        //System.out.println("DOCPARAM:IMAGE:" + image);
    } : IN_DOC_PARAM
}
<IN_FORMAL_COMMENT>
TOKEN :
{
    <DOCTAG : "@" <IDENTIFIER> (<WS>)+ >
    {
        //System.out.println("Found doc tag");
    } : IN_DOC_TAG
}

<IN_DOC_TAG>
TOKEN:
{
    <TAGDESC: (<TEXT>)*> : IN_FORMAL_COMMENT
}

<IN_DOC_PARAM_DESC>
TOKEN :
{
    <TEXT : ~["*","@"]>
}

<IN_DOC_PARAM>
TOKEN :
{
    <PARAMNAME: <IDENTIFIER> (<WS>)+ > : IN_DOC_PARAM_DESC
}

<IN_DOC_PARAM_DESC>
TOKEN :
{
    <PARAMDESC: (<TEXT>)*>
    {
        //System.out.println("@param found");
    } : IN_FORMAL_COMMENT
}

<IN_FORMAL_COMMENT>
TOKEN :
{
    <FORMAL_COMMENT_END: "*#" >
    {
       System.out.println("End formal comment");    
       inComment = false;      
    } : DEFAULT
}

<IN_FORMAL_COMMENT>
SKIP:
{
    "*"
|	"\n"
|	"\r"
}

TOKEN :
{
    < MACRODEF:	"#macro" (<WS>)* "(" >
    {
       stateStackPush();
       System.out.println("Found Macro " + image);
    } : IN_MACRO
}

<IN_MACRO>
TOKEN:
{
    <MACRONAME: <IDENTIFIER>> : IN_MACRO_ARGLIST
}


<IN_MACRO_ARGLIST>
TOKEN:
{
    <MACROARGUMENT: <IDENTIFIER>  >
}

<IN_MACRO_ARGLIST>
TOKEN:
{
    <END_MACRO_ARGLIST: ")"> {
      inMacro = true;
      resetCurrentMacro();
    } : IN_MACRO_BODY
}

<IN_MACRO_BODY>
TOKEN :
{
   <END_MACRO : ("#end" | "#{end}")>
   {
        if (! inComment) {
         if (inMacro) {
           addToCurrentMacro(image.toString().substring(0, image.toString().length() - 4));
         }
         inMacro = false;
         stateStackPop();
         System.out.println("Found end in macro: " + image);
        }
   }
}


<IN_MACRO_BODY>
MORE :
{
  < ~[] >
}


<IN_FORMAL_COMMENT>
TOKEN:
{
    <PARAMTAG : "@param">
}



<IN_FORMAL_COMMENT>
TOKEN :
{
  <FORMAL_COMMENT_CHARACTER :  ~[] >
}


<IN_DOCPARAM>
TOKEN :
{
    <LINEOFTEXT: (["A"-"z"] | <WS> | [".",",",";",":"])+ "\n">
}

/* IDENTIFIERS */
<IN_MACRO>
TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}


TOKEN:
{
    <WS :
          " "
        | "\t"
        | "\n"
        | "\r"
        | "\f"
    >
}

<DEFAULT>
SKIP :
{
   <LONELYEND: ("#end" | "#{end}")>
   {
        System.out.println("Found lonely end: " + image);
   }

}


<DEFAULT,IFORLOOP,IN_MACRO_BODY>
TOKEN :
{
    <IF_DIRECTIVE: ("#if" | "#{if}" | "#foreach" | "#{foreach}") (~[")"])* ")">
    {
        if (! inComment) {
         stateStackPush();
         SwitchTo(IFORLOOP);
         System.out.println("Found if: " + image);
        }
        if (inMacro)
          addToCurrentMacro(image.toString());

    }

|   <ELSEIF_SET_DIRECTIVE: ("#elseif" | "#{elseif}" | "#set" | "#{set}") (~[")"])* ")">
    {
        System.out.println("Found elseif: " + image);
        if (inMacro)
          addToCurrentMacro(image.toString());
    }

|   <ELSE_STOP_DIRECTIVE: ("#else" | "#{else}"| "#stop" | "#{stop}")>
    {
        System.out.println("Found elseif,stop or end: " + image);
        if (inMacro)
          addToCurrentMacro(image.toString());
    }
}

<DEFAULT,IFORLOOP,IN_MACRO_BODY>
MORE :
{
   <ANY_DIRECTIVE: ("#")>
    {
        System.out.println("Found directive char: " + image);
        if (inMacro)
          addToCurrentMacro(image.toString());
        stateStackPush();
        SwitchTo(IN_DIRECTIVE);
    }
}

<IN_DIRECTIVE>
TOKEN :
{
   <DIRECTIVE: <IDENTIFIER> (<WS>)* "(" (~[")"])* ")">
   {
        System.out.println("Found directive usage: " + image);
        if (inMacro)
          addToCurrentMacro(image.toString());
        stateStackPop();                   
   }
}

<IN_DIRECTIVE>
SKIP :
{
   <COMMENT: "#" (~["\n"])* ( ( " " | "\t" )* ( "\n" | "\r" | "\r\n" ) )?>
   {
        System.out.println("Found comment: " + image);
        if (inMacro)
          addToCurrentMacro(image.toString());
        stateStackPop();
   }
|  <OTHER: ((~[")","\n"])* | (~["(","\n"])*) ( ( " " | "\t" )* ( "\n" | "\r" | "\r\n" ) )?>
   {
        System.out.println("Found other # something: " + image);
        if (inMacro)
          addToCurrentMacro(image.toString());
        stateStackPop();
   }
}


TOKEN :
{
  <ANYTHING: ~[] > {
     if (inMacro) {
      System.out.println("Found macro stuff " + image);
      addToCurrentMacro(image.toString());
     }
  }
}

<IFORLOOP>
TOKEN:
{
    <END_DIRECTIVE: ("#end" | "#{end}")>
    {
        if (! inComment) {
         stateStackPop();
         System.out.println("Found if end: " + image);
        }
        if (inMacro)
          addToCurrentMacro(image.toString());
    }
|   <ANYTHING_IFORLOOP: ~[] >
    {
        System.out.println("Found stuff in loop: " + image);
        if (inMacro) {
          addToCurrentMacro(image.toString());
        }
    }
}

/*
<IFORLOOP>
MORE :
{
  < ~[] >
}
*/

/* OPERATORS */
DocTemplate Template() #Template : {}
{
    ( LOOKAHEAD(2) FormalComment()
    | LOOKAHEAD(2) Macro()
    | LOOKAHEAD(2) IfOrLoop()
    | LOOKAHEAD(2) <ELSEIF_SET_DIRECTIVE>
    | LOOKAHEAD(2) <ELSE_STOP_DIRECTIVE>
    | LOOKAHEAD(2) MacroUsage()
    | <ANYTHING>
        {
            justAfterComment = false;
            lastComment = null;
        }
    )*
    <EOF>
    {
        return jjtThis;
    }
}

void MacroUsage() #MacroUsage :
{
    Token t;
}
{
    t=<DIRECTIVE>
    {
     String macro = t.image;
     System.out.println("Got in MacroUsage(): " + macro);
     int pos = macro.indexOf("(");
     System.out.println("Found ( pos: " + pos);
     if (pos>0) {    
      jjtThis.setMacroName(macro.toString().substring(1, pos));
     }
     else {
      jjtThis.setMacroName(macro);
     }
    }
}

void IfOrLoop() #Macro :
{
    Token t;
}
{
    t=<IF_DIRECTIVE>
    ( LOOKAHEAD(2) IfOrLoop()
    | LOOKAHEAD(2) <ELSEIF_SET_DIRECTIVE>
    | LOOKAHEAD(2) <ELSE_STOP_DIRECTIVE>
    | LOOKAHEAD(2) Macro()
    | LOOKAHEAD(2) MacroUsage()
    | <ANYTHING_IFORLOOP>)*
    t=<END_DIRECTIVE> {}
    {
     System.out.println("If or loop: " + t.image);
    }

}

void Macro() #Macro :
{
    Token t;
}
{
    t=<MACRODEF>
    t=<MACRONAME>
    {
        jjtThis.setMacroName(t.image);
        System.out.println("Get in Macro Name:" +  t.image );
    }
    (t=<MACROARGUMENT> {jjtThis.setArgumentName(t.image);} #MacroArgument)*
    <END_MACRO_ARGLIST>
    (LOOKAHEAD(2) IfOrLoop()
    | LOOKAHEAD(2) <ELSEIF_SET_DIRECTIVE>
    | LOOKAHEAD(2) <ELSE_STOP_DIRECTIVE>
    | LOOKAHEAD(2) Macro()
    | LOOKAHEAD(2) MacroUsage() 
    | <ANYTHING>)*
    <END_MACRO>
    {
        System.out.println("Found macro 1: " + token_source.getCurrentMacro());
        jjtThis.setMacroBody(token_source.getCurrentMacro());
    }
    {
        System.out.println("Found macro: " + token_source.getCurrentMacro());
        if (lastComment != null) {
            macroComments.add(lastComment);
            jjtThis.jjtAddChild(lastComment, jjtThis.jjtGetNumChildren());
            lastComment = null;
            justAfterComment = false;
        }
    }
}

void FormalCommentCharacter() #void :
{
    Token t;
}
{
    t=<FORMAL_COMMENT_CHARACTER>
    {
        comment += t.image;
        //System.out.print(t.image);
    }
}

void Tag() #Tag :
{
    Token t;
}
{
    t=<DOCTAG>
    {
        jjtThis.setTagName(t.image);
        //System.out.println(t.image);
    }
    t=<TAGDESC>
    {
        jjtThis.setValue(t.image);
        //System.out.println(t.image);
    }
}

void Parameter() #Param :
{
    Token t;
}
{
    t=<DOCPARAM>
    {
        //System.out.println("Parameter Image:" +  t.image );
    }
    t=<PARAMNAME>
    {
        jjtThis.setName(t.image);
        //System.out.println("Parameter Name:" +  t.image );
    }
    t=<PARAMDESC>
    {
        jjtThis.setDescription(t.image);
        //System.out.println("Parameter Desc:" +  t.image );
    }
}
void FormalComment() #FormalComment  :
{
    Token t;
}
{
    t=<FORMAL_COMMENT_START> {System.out.println("Formal Comment Start"); }
    (FormalCommentCharacter() |	Parameter()	| Tag())*
    t=<FORMAL_COMMENT_END>
    {
        jjtThis.setComment(comment);
        comment = "";
        lastComment = jjtThis;
        justAfterComment = true;
    }
}
