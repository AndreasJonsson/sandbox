/* Generated By:JJTree: Do not edit this line. DocTemplate.java */

package net.sourceforge.velocidoc.parser;

import java.util.*;

public class DocTemplate extends SimpleNode {

    /**
     * List of macros defined in the template
     */
    Vector macros = new Vector();

    /**
     * List of macros used in the template
     */
    Vector macrosUsage = new Vector();
    /**
     * These are formal comments not attached to a macro
     */
    Vector docComments = new Vector();
    /**
     *
     */
  public DocTemplate(int id) {
    super(id);
  }

  public DocTemplate(MacroParser p, int id) {
    super(p, id);
  }
    public DocMacro getMacro(int index) {
        return (DocMacro) macros.get(index);
    }
    public int getMacroCount() {
        return macros.size();
    }
    public int getCommentCount() {
        return docComments.size();
    }
    public DocFormalComment getComment(int i) {
        return (DocFormalComment) docComments.get(i);
    }
    public void jjtAddChild(Node n, int i) {
        if (n.isA(MacroParserTreeConstants.JJTMACROUSAGE)) {
            System.out.println("DocTemplate::jjtAddChild, added macro usage " + ((DocMacroUsage)n).getMacroName());
            macrosUsage.add(n);
        } else if (n.isA(MacroParserTreeConstants.JJTMACRO)) {
            macros.add(n);
        } else if (n.isA(MacroParserTreeConstants.JJTFORMALCOMMENT)) {
            docComments.add(n);
            System.out.println("DocTemplate::jjtAddChild, added formal comment");
        }
        super.jjtAddChild( n,  i);
    }
    public void jjtRemoveChild(int index) {
        Node node = this.jjtGetChild(index);
        System.out.println("DocTemplate::removeCHild, node=" + node);
        this.docComments.remove(node);
        super.jjtRemoveChild( index);
    }

    public DocMacroUsage getUsageMacro(int index) {
         return (DocMacroUsage) macrosUsage.get(index);
     }

    public int getMacroUsageCount() {
        return macrosUsage.size();
    }
}
